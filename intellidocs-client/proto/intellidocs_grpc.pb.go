// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/intellidocs.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IntelliDocsService_ProcessDocuments_FullMethodName = "/intellidocs.IntelliDocsService/ProcessDocuments"
	IntelliDocsService_RetrieveTopN_FullMethodName     = "/intellidocs.IntelliDocsService/RetrieveTopN"
)

// IntelliDocsServiceClient is the client API for IntelliDocsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntelliDocsServiceClient interface {
	ProcessDocuments(ctx context.Context, in *ProcessDocumentRequest, opts ...grpc.CallOption) (*ProcessDocumentResponse, error)
	RetrieveTopN(ctx context.Context, in *RetrieveTopNRequest, opts ...grpc.CallOption) (*RetrieveTopNResponse, error)
}

type intelliDocsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntelliDocsServiceClient(cc grpc.ClientConnInterface) IntelliDocsServiceClient {
	return &intelliDocsServiceClient{cc}
}

func (c *intelliDocsServiceClient) ProcessDocuments(ctx context.Context, in *ProcessDocumentRequest, opts ...grpc.CallOption) (*ProcessDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessDocumentResponse)
	err := c.cc.Invoke(ctx, IntelliDocsService_ProcessDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intelliDocsServiceClient) RetrieveTopN(ctx context.Context, in *RetrieveTopNRequest, opts ...grpc.CallOption) (*RetrieveTopNResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetrieveTopNResponse)
	err := c.cc.Invoke(ctx, IntelliDocsService_RetrieveTopN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntelliDocsServiceServer is the server API for IntelliDocsService service.
// All implementations must embed UnimplementedIntelliDocsServiceServer
// for forward compatibility.
type IntelliDocsServiceServer interface {
	ProcessDocuments(context.Context, *ProcessDocumentRequest) (*ProcessDocumentResponse, error)
	RetrieveTopN(context.Context, *RetrieveTopNRequest) (*RetrieveTopNResponse, error)
	mustEmbedUnimplementedIntelliDocsServiceServer()
}

// UnimplementedIntelliDocsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntelliDocsServiceServer struct{}

func (UnimplementedIntelliDocsServiceServer) ProcessDocuments(context.Context, *ProcessDocumentRequest) (*ProcessDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessDocuments not implemented")
}
func (UnimplementedIntelliDocsServiceServer) RetrieveTopN(context.Context, *RetrieveTopNRequest) (*RetrieveTopNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTopN not implemented")
}
func (UnimplementedIntelliDocsServiceServer) mustEmbedUnimplementedIntelliDocsServiceServer() {}
func (UnimplementedIntelliDocsServiceServer) testEmbeddedByValue()                            {}

// UnsafeIntelliDocsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntelliDocsServiceServer will
// result in compilation errors.
type UnsafeIntelliDocsServiceServer interface {
	mustEmbedUnimplementedIntelliDocsServiceServer()
}

func RegisterIntelliDocsServiceServer(s grpc.ServiceRegistrar, srv IntelliDocsServiceServer) {
	// If the following call pancis, it indicates UnimplementedIntelliDocsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IntelliDocsService_ServiceDesc, srv)
}

func _IntelliDocsService_ProcessDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelliDocsServiceServer).ProcessDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntelliDocsService_ProcessDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelliDocsServiceServer).ProcessDocuments(ctx, req.(*ProcessDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntelliDocsService_RetrieveTopN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveTopNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelliDocsServiceServer).RetrieveTopN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntelliDocsService_RetrieveTopN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelliDocsServiceServer).RetrieveTopN(ctx, req.(*RetrieveTopNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntelliDocsService_ServiceDesc is the grpc.ServiceDesc for IntelliDocsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntelliDocsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "intellidocs.IntelliDocsService",
	HandlerType: (*IntelliDocsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessDocuments",
			Handler:    _IntelliDocsService_ProcessDocuments_Handler,
		},
		{
			MethodName: "RetrieveTopN",
			Handler:    _IntelliDocsService_RetrieveTopN_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/intellidocs.proto",
}
